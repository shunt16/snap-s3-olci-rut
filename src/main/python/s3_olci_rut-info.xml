<!-- This XML file describes the interface of the python operator. It defines the required source product(s) and the parameters
     for the processing. By using the information of this file the graphical user interface is automatically generated and also
     the help on the command line is derived from the information provided here.
-->
<operator>
    <!-- The name uniquely identifies the operator within SNAP -->
    <name>org.esa.snap.python.S3OLCIRutOp</name>
    <!-- The alias is a more user-friendly name, e.g. to be used on the command line -->
    <alias>S3OLCIRutOp</alias>
    <operatorClass>org.esa.snap.python.gpf.PyOperator</operatorClass>

    <version>0.0</version>
    <authors>Sam Hunt</authors>
    <copyright>2016 by ESA</copyright>

    <description>Radiometric uncertainty tool for Sentinel-3 OLCI L1B products.</description>

    <namedSourceProducts>
        <!-- One or more source products can be specified.
             In the GUI only one is currently supported. On the command line multiple source products
             can be specified by referencing them with the here defined names.
         -->
        <sourceProduct>
            <name>source</name>
        </sourceProduct>
    </namedSourceProducts>

    <parameters>
        <parameter>
            <!-- The name of the parameter; use context.getParameter('coverage_factor') in your Python code to retrieve the value -->
            <name>coverage_factor</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>The value of the coverage factor for the uncertainty evaluation (<i>k</i>=1 means 68.27% probability)</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>double</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>1.0</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; use context.getParameter('band_names') in your Python code to retrieve the value -->
            <name>band_names</name>
            <!-- The label is shown in the GUI -->
            <label>Band names</label>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>The bands for which the uncertainty shall be computed</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>String[]</dataType>
            <rasterDataNodeClass>org.esa.snap.core.datamodel.Band</rasterDataNodeClass>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Instrument_noise</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Noise (shot, thermal, etc.) introduced by the CCD and VAM of the instrument</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Instrument_aging</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Uncertainty caused by instrument aging between calibrations</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>CCD_stability</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>CCD response stability uncertainty</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Periodic_signal_error</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Error caused by uncorrected Period Signal</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Diffuser_characterisation</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Calibration diffuser characterisation measurement uncertainty</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Diffuser_modelisation</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Calibration diffuser BRDF modelisation uncertainty</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Diffuser_alignment</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Uncertainty caused by variation in sun incidence angle on to the diffuser</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Calibration_diffuser_straylight</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Uncertainty caused by straylight within calibration mechanism affecting the BRDF modelisation</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Calibration_camera_straylight</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Camera stralight during calibration uncertainty</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Calibration_diffuser_aging</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Uncertainty due to aging of the calibration diffuser</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Reference_diffuser_aging</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Uncertainty due to aging of the reference diffuser</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
                <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Video_chain-non-linearity</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Video chain non-linearity correction uncertainty</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>ADC_non-linaerity</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Uncertainty from non-linaerity in the ADC qunatisation process</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Offset_compensation</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Uncertainty from offset compensation loop clamping stability</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Dark_stability</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Dark signal stability uncertainty</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>
        <parameter>
            <!-- The name of the parameter; user operator.getParameter('lowerFactor') in your Python code to retrieve the value -->
            <name>Smear_gain_compensation</name>
            <!-- The description is shown in the help on the command line and also as tooltip in the GUI -->
            <description>Uncertainty due to lack of smear gain knowledge</description>
            <!-- The type of the parameter; can be boolean, byte, short, int, long, float, double, java.lang.String -->
            <dataType>boolean</dataType>
            <!-- The default value of the parameter; this is used if no value is specified by the user -->
            <defaultValue>True</defaultValue>
        </parameter>

    </parameters>

</operator>